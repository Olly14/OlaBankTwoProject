@model IEnumerable<Bank.App.Models.AccountViewModel>
@inject SignInManager<AppUser> signInManager


@{
    if (signInManager.IsSignedIn(User) && (User.IsInRole("Bank Admin") || User.IsInRole("Bank Manager")))
    {
        Layout = "_Layout";
    }
    else
    {
        Layout = "_CustomerLayout";
    }
    ViewData["Title"] = "Index";
}


@foreach (var user in @Model)
{
    @Html.Hidden("UriKey");
    @Html.Hidden("AccUriKey");
}

<h2>User Accounts</h2>


<table class="table">
    <thead>
        <tr>

            <th>
                @Html.DisplayNameFor(model => model.AccountOwner)
            </th>

            <th>
                @Html.DisplayNameFor(model => model.NumberOfAccounts)
            </th>

            <th>
                @Html.DisplayNameFor(model => model.IsBlocked)
            </th>

            <th>
                @Html.DisplayNameFor(model => model.Email)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.OpeningBalance)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CurrentBalance)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.OpeningDate)
            </th>

            <th></th>
            <th></th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
        <tr>


            <td>
                @Html.DisplayFor(modelItem => item.AccountOwner)
            </td>

            <td>
                @Html.DisplayFor(modelItem => item.NumberOfAccounts)
            </td>

            <td>
                @Html.DisplayFor(modelItem => item.IsBlocked)
            </td>

            <td>
                @Html.DisplayFor(modelItem => item.Email)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.OpeningBalance)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CurrentBalance)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.OpeningDate)
            </td>



            <td>
                @Html.ActionLink("Details", "Details", new { id = item.AccUriKey }, new { @class = "btn btn-primary" })
            </td>
            <td>
                @Html.ActionLink("Accounts Transfer", "TransferFund", new { id = item.AccUriKey }, new { @class = "btn btn-primary" })
            </td>

            @if (signInManager.IsSignedIn(User) && (User.IsInRole("Bank Admin") || User.IsInRole("Bank Manager")))
            {
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.AccUriKey }, new { @class = "btn btn-primary" })
                </td>

                <td>
                    @Html.ActionLink("Block", "BlockAccount", new { id = item.AccUriKey }, new { @class = "btn btn-primary" })
                </td>
                <td>
                    @Html.ActionLink("Unblock", "UnBlockAccount", new { id = item.AccUriKey }, new { @class = "btn btn-primary" })
                </td>

                <td>
                    @Html.ActionLink("Add Account", "AddAccount", new { id = item.UriKey }, new { @class = "btn btn-primary" })
                </td>

                <td>
                    @Html.ActionLink("Delete", "Delete", new { id = item.AccUriKey }, new { @class = "btn btn-danger" })
                </td>
            }

        </tr>
        }
    </tbody>
</table>


